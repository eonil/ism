// Note: Generated by AI assistant
use ism::text::Message;
use std::collections::HashMap;

#[test]
fn test_text_message() {
    let msg = Message::Text("hello".to_string());
    let json = serde_json::to_string(&msg).unwrap();
    assert_eq!(json, r#""hello""#);

    let decoded: Message = serde_json::from_str(&json).unwrap();
    assert!(matches!(decoded, Message::Text(text) if text == "hello"));
}

#[test]
fn test_list_message() {
    let msg = Message::List(vec![
        Message::Text("a".to_string()),
        Message::Text("b".to_string()),
    ]);
    let json = serde_json::to_string(&msg).unwrap();
    assert_eq!(json, r#"["a","b"]"#);

    let decoded: Message = serde_json::from_str(&json).unwrap();
    assert!(matches!(decoded, Message::List(_)));
}

#[test]
fn test_table_message() {
    let mut map = HashMap::new();
    map.insert("x".to_string(), Message::Text("y".to_string()));
    let msg = Message::Table(map);
    let json = serde_json::to_string(&msg).unwrap();
    assert_eq!(json, r#"{"x":"y"}"#);

    let decoded: Message = serde_json::from_str(&json).unwrap();
    assert!(matches!(decoded, Message::Table(_)));
} 